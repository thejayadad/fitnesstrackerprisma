generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String          @id @default(cuid())
 
  email         String          @unique
   name           String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  foodEntries    Food[]
  exerciseEntries Exercise[]
  monthHistories MonthHistory[]
  yearHistories  YearHistory[]
  settings       Settings?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Food {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String
  category    MealCategory
  name        String
  protein     Int
  carbs       Int
  fats        Int
  entryDate   String
  createdAt   DateTime      @default(now())
}

model Exercise {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail      String
  category       ExerciseCategory
  duration       Int
  caloriesBurned Int
  entryDate      String
  reps           Int?          // Strength only
  sets           Int?          // Strength only
  weight         Float?        // Strength only
  createdAt      DateTime      @default(now())
}

model MonthHistory {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail       String       @unique
  day             Int
  month           Int
  year            Int
  foodCalories    Float
  exerciseCalories Float
  createdAt       DateTime      @default(now())

}

model YearHistory {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail       String       @unique
  month           Int
  year            Int
  foodCalories    Float
  exerciseCalories Float
  createdAt       DateTime      @default(now())

}

model Settings {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail       String       @unique
  goalCalories    Float?
  fitnessGoal     String?
  createdAt       DateTime      @default(now())
}

enum MealCategory {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum ExerciseCategory {
  CARDIO
  STRENGTH
}
